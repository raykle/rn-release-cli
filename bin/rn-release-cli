#!/usr/bin/env node
// --inspect-brk

const program = require('commander')
const inquirer = require('inquirer')
const path = require('path')
const chalk = require('chalk')
const ora = require('ora')
const Prompt = require('../src/prompt')

const bundleOptions = {
  platform: 'ios',
  entryFile: '',
  bundlePath: '',
  bundleFileName: '',
  sourceMapFileName: '',
  resetCache: false,
}

const codePushOptions = {
  appName: '',
  targetBinaryVersion: '',
  desc: '',
  env: 'Staging',
}

const bugsnagOptions = {
  version: '',
  apiKey: '',
}

const defaultConfig = require('../config/rn-release.json')

const prompt = new Prompt()

/* ********************************************************** */
/* ********************************************************** */

program
  .version(require('../package.json').version, '-v, --version')
  .usage('<cmd> [project-name]')
  .option(
    '-e, --entry-file <entryFile>',
    'Path to the root JS file, either absolute or relative to JS root. (default: ./index.js)',
    'index.js'
  )
  .option(
    '-r, --reset-cache',
    'bundle - Removes cached files',
    false
  )
  .on('-h, --help', help)

/* ********************************************************** */
/* ********************************************************** */

program
  .command('release')
  .description('xxx')
  .action(async () => {
    initDefaultConfig()
    const platform = await prompt.bundlePlatformChoice()
    handlePlatform(platform)
    mergeConfigFromProject(platform)

    // const newEntryFile = await prompt.bundleEntryFileConfirm(bundleOptions.entryFile)
    // if (newEntryFile) {
        // fixme:
    //   bundleOptions.entryFile = newEntryFile
    // }

    const isBundleResetCache = await prompt.bundleResetCacheConfirm()
    bundleOptions.resetCache = isBundleResetCache

    const codePushEnv = await prompt.codePushEnvChoice()
    codePushOptions.env = codePushEnv

    const codePushTargetVersion = await prompt.codePushTargetVersionInput()
    codePushOptions.targetBinaryVersion = codePushTargetVersion

    const codePushDescConfirmed = await prompt.codePushDescConfirm(codePushOptions.desc)
    if (!codePushDescConfirmed) {
      console.log('')
      ora().fail('请修改 `package.json` 中 `description` 的值后，重新发布')
      process.exit(1)
    }

    console.log('bundleOptions: ', JSON.stringify(bundleOptions))
    console.log('codePushOptions: ', JSON.stringify(codePushOptions))
    console.log('bugsnagOptions: ', JSON.stringify(bugsnagOptions))

    require('../src/bundle')(bundleOptions)
      .then(() => {
        process.exit(0)
      })
      .catch(err => {
        console.log('打包失败: ', err)
        process.exit(1)
      })
  })


program.parse(process.argv)

function help() {}

function initDefaultConfig() {
  const {
    bundleOptions: defaultBundleOptions,
    codePushOptions: defaultCodePushOptions,
    bugsnagOptions: defaultBugsnagOptions
  } = defaultConfig

  bundleOptions.entryFile = defaultBundleOptions.entryFile
  bundleOptions.bundlePath = defaultBundleOptions.bundlePath
  bugsnagOptions.apiKey = defaultBugsnagOptions.apiKey
}

function handlePlatform(platform) {
  bundleOptions.platform = platform
  // bundleOptions.bundlePath = path.join(process.cwd(), bundleOptions.bundlePath, platform)
  bundleOptions.bundlePath = bundleOptions.bundlePath + '/' + platform

  const { 
    bundleOptions: defaultBundleOptions,
    codePushOptions: defaultCodePushOptions,
  } = defaultConfig
  Object.assign(bundleOptions, defaultBundleOptions[platform])
  Object.assign(codePushOptions, defaultCodePushOptions[platform])
}

function mergeConfigFromProject(platform) {
  // package.json
  const projectPackageJSON = require(path.join(process.cwd(), './package.json'))
  const {
    version: packageJSONVersion,
    description: packageJSONDesc = '',
    newFeatures: packageJSONNewFeatures = '',
  } = projectPackageJSON

  if (!packageJSONVersion || packageJSONVersion.length === 0) {
    ora().fail('package.json 中 `version` 为空')
    process.exit(1)
  }

  // rn-release.json
  const projectRnReleaseConfig = require(path.join(process.cwd(), './rn-release.json'))
  let {
    bundleOptions: projectBundleOptions,
    codePushOptions: projectCodePushOptions,
    bugsnagOptions: projectBugsnagOptions
  } = projectRnReleaseConfig || {}

  if (!projectBundleOptions || typeof projectBundleOptions !== 'object') { projectBundleOptions = {} }
  if (!projectCodePushOptions || typeof projectCodePushOptions !== 'object') { projectCodePushOptions = {} }
  if (!projectBugsnagOptions || typeof projectBugsnagOptions !== 'object') { projectBugsnagOptions = {} }

  // bundleOptions
  const { [platform]: platformBundleOptions = {} } = projectBundleOptions
  bundleOptions.bundlePath = projectBundleOptions.bundlePath + '/' + platform
  delete projectBundleOptions.ios
  delete projectBundleOptions.android
  delete projectBundleOptions.bundlePath
  Object.assign(bundleOptions, platformBundleOptions, projectBundleOptions)

  // codePushOptions
  codePushOptions.desc = JSON.stringify({
    desc: packageJSONDesc,
    newFeatures: packageJSONNewFeatures,
  })
  const { [platform]: platformCodePushOptions = {} } = projectCodePushOptions
  delete projectCodePushOptions.ios
  delete projectCodePushOptions.android
  Object.assign(codePushOptions, platformCodePushOptions)

  // bugsnagOptions
  bugsnagOptions.version = packageJSONVersion
  Object.assign(bugsnagOptions, projectBugsnagOptions)
}